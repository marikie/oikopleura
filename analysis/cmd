# intersect overlapping aligned segments in the lancelet genome
bedtools intersect -wa -wb -a lanc_lancGene_eshk_eshkGene_consistent_20240109.txt -b lanc_lancGene_oik_oikGene_consistent_20240109.out > lanc_eshk_lanc_oik_intersect_tmp.out

# remove duplicate lines and sort the data by lancelet starting position in descending order
sort -t$'\t' -k2,2 lanc_eshk_lanc_oik_intersect_tmp.out > sorted_lanc_eshk_lanc_oik.out
sort -t$'\t' -u lanc_eshk_lanc_oik_intersect_tmp.out > sorted_lanc_eshk_lanc_oik.out

cat lanc_eshk_lanc_oik_intersect_tmp.out | sort -u | sort -t$'\t' -k2,2 > sorted_lanc_eshk_lanc_oik.out

# remove duplicate lines and sort data by starting pos of oik
sort -t$'\t' -k14,14 lanc_eshk_lanc_oik_intersect_tmp.out | uniq > sorted_oik.out
# (mariko) sort data by combination of two keys (1st priority:oik's chromosome name in alphabetic order, 2nd priority:oik's start position in numeric order)
sort -t$'\t' -k13,13 -k14,14n lanc_eshk_lanc_oik_intersect_tmp.out > sorted_oik_mrk.out

# remove duplicate lines and sort dat by starting pos of eshk
sort -t$'\t' -k6,6 lanc_eshk_lanc_oik_intersect_tmp.out | uniq > sorted_eshk.out
# (mariko) sort data by combination of two keys (1st priority:eshk's chromosome name in alphabetic order, 2nd priority:eshk's start position in numeric order)
sort -t$'\t' -k5,5 -k6,6n lanc_eshk_lanc_oik_intersect_tmp.out > sorted_eshk_mrk.out

# print out doublets of lines for permutations of oik using intersected data sorted by oik position
awk -F'\t' '{
    if (NR>1 && $4 == lancID && $16 == oikID)
	print prev RS $0 RS >> "l-same_o-same.out";
    if (NR>1 && $4 == lancID && $16 != oikID)
	print prev RS $0 RS >> "l-same_o-diff.out";
    if (NR>1 && $4 != lancID && $16 == oikID)
	print prev RS $0 RS >> "l-diff_o-same.out";
    if (NR>1 && $4 != lancID && $16 = oikID)
	print prev RS $0 RS >> "l-diff_o-diff.out";
       
    lancID = $4; oikID = $16; prev = $0;
}' sorted_oik.out	
# (mariko)
awk -F'\t' -v OFS='\t' '{
    if (NR>1 && $4 == lancID && $16 == oikID)
	print prev RS $0 RS >> "l-same_o-same_mrk.out";
    if (NR>1 && $4 == lancID && $16 != oikID)
	print prev RS $0 RS >> "l-same_o-diff_mrk.out";
    if (NR>1 && $4 != lancID && $16 == oikID)
	print prev RS $0 RS >> "l-diff_o-same_mrk.out";
    if (NR>1 && $4 != lancID && $16 != oikID)
	print prev RS $0 RS >> "l-diff_o-diff_mrk.out";
       
    lancID = $4; oikID = $16; prev = $0;
}' sorted_oik_mrk.out	

# print out doublets of lines for permutations of eshk using intersected data sorted by eshk position
awk -F'\t' '{
    if (NR>1 && $4 == lancID && $8 == eshkID)
        print prev RS $0 RS >> "l-same_e-same.out";
    if (NR>1 && $4 == lancID && $8 != eshkID)
        print prev RS $0 RS >> "l-same_e-diff.out";
    if (NR>1 && $4 != lancID && $8 == eshkID)
        print prev RS $0 RS >> "l-diff_e-same.out";
    if (NR>1 && $4 != lancID && $8 = eshkID)
        print prev RS $0 RS >> "l-diff_e-diff.out";

    lancID = $4; eshkID = $8; prev = $0;
}' sorted_eshk.out
# (mariko)
awk -F'\t' -v OFS='\t' '{
    if (NR>1 && $4 == lancID && $8 == eshkID)
        print prev RS $0 RS >> "l-same_e-same_mrk.out";
    if (NR>1 && $4 == lancID && $8 != eshkID)
        print prev RS $0 RS >> "l-same_e-diff_mrk.out";
    if (NR>1 && $4 != lancID && $8 == eshkID)
        print prev RS $0 RS >> "l-diff_e-same_mrk.out";
    if (NR>1 && $4 != lancID && $8 != eshkID)
        print prev RS $0 RS >> "l-diff_e-diff_mrk.out";

    lancID = $4; eshkID = $8; prev = $0;
}' sorted_eshk_mrk.out

# print out doublets of lines where the geneID pattern for the eshk and oik is same-same
awk -F'\t' '{if (NR>1 && $8 == eshkID && $16 == oikID) print prev RS $0 RS > "same-same.out"; eshkID = $8; oikID = $16; prev = $0 }' sorted_lanc_eshk_lanc_oik.out

# print out doublets of lines where the geneID pattern for the eshk and oik is same-diff
awk -F'\t' '{if (NR>1 && $8 == eshkID && $16 != oikID) print prev RS $0 RS > "same-diff.out"; eshkID = $8; oikID = $16; prev = $0 }' sorted_lanc_eshk_lanc_oik.out

# print out doublets of lines where the geneID pattern for the eshk and oik is diff-same
awk -F'\t' '{if (NR>1 && $8 != eshkID && $16 == oikID) print prev RS $0 RS >> "diff-same.out"; eshkID = $8; oikID = $16; prev = $0 }' sorted_lanc_eshk_lanc_oik.out

# print all eshk and oik geneIDs to make sure that only same-same matches are being printed by the above cmd
awk -F'\t' '{print $8 $16} ' same-same.out

# print out doublets of lines for each permutation of geneID 

awk -F'\t' '{
    if (NR>1 && $4 == lancID && $8 == eshkID && $16 == oikID) 
        print prev RS $0 RS >> "l-same_e-same_o-same.out";
    else if (NR>1 && $4 == lancID && $8 == eshkID && $16 != oikID) 
        print prev RS $0 RS >> "l-same_e-same_o-diff.out";
    else if (NR>1 && $4 == lancID && $8 != eshkID && $16 == oikID) 
        print prev RS $0 RS >> "l-same_e-diff_o-same.out";
    else if (NR>1 && $4 == lancID && $8 != eshkID && $16 != oikID) 
        print prev RS $0 RS >> "l-same_e-diff_o-diff.out";
    else if (NR>1 && $4 != lancID && $8 == eshkID && $16 == oikID) 
        print prev RS $0 RS >> "l-diff_e-same_o-same.out";
    else if (NR>1 && $4 != lancID && $8 == eshkID && $16 != oikID) 
        print prev RS $0 RS >> "l-diff_e-same_o-diff.out";
    else if (NR>1 && $4 != lancID && $8 != eshkID && $16 == oikID) 
        print prev RS $0 RS >> "l-diff_e-diff_o-same.out";
    else if (NR>1 && $4 != lancID && $8 != eshkID && $16 != oikID) 
        print prev RS $0 RS >> "l-diff_e-diff_o-diff.out";
    
    lancID = $4; eshkID = $8; oikID = $16; prev = $0 
}' sorted_lanc_eshk_lanc_oik.out

#sorts the lanc_oik alignment by lanc gene position
cat lanc_lancGene_oik_oikGene_consistent_20240109.out | sort -t$'\t' -k2,2 > sorted_lanc_oik.out

#prints out doublets for permutations of geneID patterns for lanc and oik
awk -F'\t' '{
    if (NR>1 && $4 == lancID && $8 == oikID)
        print prev RS $0 RS >> "l-same_o-same.out";
    else if (NR>1 && $4 == lancID && $8 != oikID)
        print prev RS $0 RS >> "l-same_o-diff.out";
    else if (NR>1 && $4 != lancID && $8 == oikID)
        print prev RS $0 RS >> "l-diff_o-same.out";
    else if (NR>1 && $4 != lancID && $8 != oikID)
        print prev RS $0 RS >> "l-diff_o-diff.out";

    lancID = $4; oikID = $8; prev = $0
}' sorted_lanc_eshk_lanc_oik.out
